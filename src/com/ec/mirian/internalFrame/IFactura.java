/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ec.mirian.internalFrame;

import com.ec.mirian.bean.MailSetting;
import com.ec.mirian.domain.Configuracion;
import com.ec.mirian.domain.VentfacCabecera;
import com.ec.mirian.enumerado.TipoDocumentoEnum;
import com.ec.mirian.gui.jframe.DLocker;
import com.ec.mirian.gui.jframe.VentanaPrincipal;
import com.ec.mirian.models.FacturaDetalleModel;
import com.ec.mirian.service.ConexionService;
import com.ec.mirian.service.FactoryService;
import com.ec.mirian.service.FacturaService;
import com.ec.mirian.so.Linux;
import com.ec.mirian.so.Mac;
import com.ec.mirian.so.So;
import com.ec.mirian.so.Windows;
import com.ec.mirian.util.Constante;
import com.ec.mirian.util.PropertiesMail;
import com.ec.mirian.util.PropertiesUtil;
import com.ec.mirian.util.Util;
import com.ec.mirian.util.XStreamAutorizacion;
import com.mirian.correo.notificacion.EnviarNotificacion;
import com.mirian.correo.notificacion.MailProperties;
import com.mirian.correo.notificacion.Notificacion;
import com.mirian.envio.EnvioAutorizar;
import com.mirian.envio.EnvioRecepcion;
import com.mirian.pdf.service.PdfFactory;
import com.mirian.pdf.service.PdfServices;
import com.mirian.reporte.impreso.ReporteFactura;
import com.mirian.validacion.exception.ValidacionException;
import com.mirian.validacion.services.ValidacionFactory;
import ec.gob.sri.comprobantes.ws.aut.RespuestaComprobante;
import ec.gob.sri.comprobantes.ws.rec.RespuestaSolicitud;
import ec.incloud.ce.bean.common.InfoTributaria;
import ec.incloud.ce.bean.factura.Factura;
import ec.incloud.ce.bean.factura.FacturaDetalle;
import ec.incloud.ce.bean.factura.InfoFactura;
import ec.incloud.ce.firma.exception.FirmaException;
import ec.incloud.ce.firma.services.FirmaFactory;
import ec.incloud.ce.sri.services.AutorizacionException;
import ec.incloud.ce.sri.services.RecepcionException;
import ec.incloud.ce.xml.exception.XmlException;
import ec.incloud.ce.xml.services.XmlFactory;
import ec.incloud.ce.xml.services.XmlServices;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author MARCELO
 */
public class IFactura extends javax.swing.JInternalFrame {

    private static IFactura INSTANCE;
    
    public static IFactura getInstance() {
        return INSTANCE;
    }

    /**
     * Creates new form IFactura
     */
    public IFactura() {
        initComponents();
        INSTANCE = this;
        cargarConfiguracion();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel8 = new javax.swing.JPanel();
        pnlPrincipal = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlPedido = new javax.swing.JPanel();
        pnlInputPedido = new javax.swing.JPanel();
        lblPedido = new javax.swing.JLabel();
        txtNumeroPedido = new javax.swing.JTextField();
        btnConfirmarDatos = new javax.swing.JButton();
        btnXml = new javax.swing.JButton();
        pnlInfoTributario = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtRazonSocial = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtNombreComercial = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtMatriz = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtEstablecimiento = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPtoEmision = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtSecuencial = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        txtDocumento = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        lblFechaEmision = new javax.swing.JLabel();
        txtFechaEmision = new javax.swing.JTextField();
        lblIdTipoComprador = new javax.swing.JLabel();
        txtTipoIdComprador = new javax.swing.JTextField();
        lblIdComprador = new javax.swing.JLabel();
        txtIdComprador = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        txtCiudadCliente = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        txtCorreoCliente = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        lblRSComprador = new javax.swing.JLabel();
        txtRsComprador = new javax.swing.JTextField();
        lblDirComprador = new javax.swing.JLabel();
        txtDirComprador = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        txtCodigoCliente = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbDetalle = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        txtValor = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        txtPorDescuento = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        txtDescuento = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        txtSubTotal = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        txtPorIva = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        txtIva = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        txtImporteTotal = new javax.swing.JTextField();
        pnlEmision = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtRutaXml = new javax.swing.JTextField();
        btnValidar = new javax.swing.JButton();
        btnRecepcion = new javax.swing.JButton();
        btnAutorizacion = new javax.swing.JButton();
        jPanel17 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        txtXmlAutorizado = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtPdf = new javax.swing.JTextField();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtclaveAcceso = new javax.swing.JTextField();
        lblEstado = new javax.swing.JLabel();
        txtEstado = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        txtFechaAutorizacion = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        edtConsola = new javax.swing.JEditorPane();

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setClosable(true);
        setMaximizable(true);
        setTitle(".:: FACTURAS ::.");
        getContentPane().setLayout(new java.awt.CardLayout());

        pnlPrincipal.setLayout(new java.awt.GridLayout(0, 1));

        pnlInputPedido.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlInputPedido.setLayout(new javax.swing.BoxLayout(pnlInputPedido, javax.swing.BoxLayout.LINE_AXIS));

        lblPedido.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblPedido.setText("Pedido:");
        pnlInputPedido.add(lblPedido);

        txtNumeroPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumeroPedidoActionPerformed(evt);
            }
        });
        pnlInputPedido.add(txtNumeroPedido);

        btnConfirmarDatos.setText("Ver Datos");
        btnConfirmarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarDatosActionPerformed(evt);
            }
        });
        pnlInputPedido.add(btnConfirmarDatos);

        btnXml.setText("XML");
        btnXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXmlActionPerformed(evt);
            }
        });
        pnlInputPedido.add(btnXml);

        pnlInfoTributario.setBorder(javax.swing.BorderFactory.createTitledBorder("Informaci√≥n Tributaria"));
        pnlInfoTributario.setLayout(new java.awt.GridLayout(3, 0, 0, 3));

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.LINE_AXIS));

        jLabel3.setText("Razon Social:");
        jPanel1.add(jLabel3);

        txtRazonSocial.setEditable(false);
        jPanel1.add(txtRazonSocial);

        jLabel4.setText("  Nombre Comercial:");
        jPanel1.add(jLabel4);

        txtNombreComercial.setEditable(false);
        jPanel1.add(txtNombreComercial);

        pnlInfoTributario.add(jPanel1);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jLabel9.setText("Matriz:");
        jPanel2.add(jLabel9);

        txtMatriz.setEditable(false);
        jPanel2.add(txtMatriz);

        pnlInfoTributario.add(jPanel2);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        jLabel6.setText("Establecimiento:");
        jPanel3.add(jLabel6);

        txtEstablecimiento.setEditable(false);
        jPanel3.add(txtEstablecimiento);

        jLabel7.setText("  Pto Emision:");
        jPanel3.add(jLabel7);

        txtPtoEmision.setEditable(false);
        jPanel3.add(txtPtoEmision);

        jLabel8.setText("  Secuencial:");
        jPanel3.add(jLabel8);

        txtSecuencial.setEditable(false);
        jPanel3.add(txtSecuencial);

        jLabel24.setText("  Identificacion:");
        jPanel3.add(jLabel24);

        txtDocumento.setEditable(false);
        txtDocumento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocumentoActionPerformed(evt);
            }
        });
        jPanel3.add(txtDocumento);

        pnlInfoTributario.add(jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Informaci√≥n Factura"), "Informaci√≥n Factura"));
        jPanel4.setLayout(new java.awt.GridLayout(2, 0, 0, 3));

        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.LINE_AXIS));

        lblFechaEmision.setText("Fe. Emisi√≥n:");
        jPanel5.add(lblFechaEmision);

        txtFechaEmision.setEditable(false);
        jPanel5.add(txtFechaEmision);

        lblIdTipoComprador.setText("  Tipo:");
        jPanel5.add(lblIdTipoComprador);

        txtTipoIdComprador.setEditable(false);
        jPanel5.add(txtTipoIdComprador);

        lblIdComprador.setText("  Doc.:");
        jPanel5.add(lblIdComprador);

        txtIdComprador.setEditable(false);
        jPanel5.add(txtIdComprador);

        jLabel29.setText("  Ciudad:");
        jPanel5.add(jLabel29);

        txtCiudadCliente.setEditable(false);
        jPanel5.add(txtCiudadCliente);

        jLabel30.setText("  Correo:");
        jPanel5.add(jLabel30);

        txtCorreoCliente.setEditable(false);
        jPanel5.add(txtCorreoCliente);

        jPanel4.add(jPanel5);

        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.LINE_AXIS));

        lblRSComprador.setText("Comprador:");
        jPanel6.add(lblRSComprador);

        txtRsComprador.setEditable(false);
        jPanel6.add(txtRsComprador);

        lblDirComprador.setText("  Dir Comprador:");
        jPanel6.add(lblDirComprador);

        txtDirComprador.setEditable(false);
        txtDirComprador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDirCompradorActionPerformed(evt);
            }
        });
        jPanel6.add(txtDirComprador);

        jLabel31.setText("  Codigo:");
        jPanel6.add(jLabel31);

        txtCodigoCliente.setEditable(false);
        jPanel6.add(txtCodigoCliente);

        jPanel4.add(jPanel6);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalle"));
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.LINE_AXIS));

        tbDetalle.setModel(new FacturaDetalleModel());
        jScrollPane4.setViewportView(tbDetalle);

        jPanel7.add(jScrollPane4);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Totales"));
        jPanel9.setLayout(new java.awt.GridLayout(1, 0, 3, 0));

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Total"));
        jPanel16.setLayout(new javax.swing.BoxLayout(jPanel16, javax.swing.BoxLayout.LINE_AXIS));

        jLabel28.setText("$ ");
        jPanel16.add(jLabel28);

        txtValor.setEditable(false);
        txtValor.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel16.add(txtValor);

        jPanel9.add(jPanel16);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Descuento"));
        jPanel11.setLayout(new javax.swing.BoxLayout(jPanel11, javax.swing.BoxLayout.LINE_AXIS));

        txtPorDescuento.setEditable(false);
        txtPorDescuento.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel11.add(txtPorDescuento);

        jLabel17.setText(" % ");
        jPanel11.add(jLabel17);

        jLabel25.setText(" $ ");
        jPanel11.add(jLabel25);

        txtDescuento.setEditable(false);
        txtDescuento.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel11.add(txtDescuento);

        jPanel9.add(jPanel11);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Subtotales"));
        jPanel15.setLayout(new javax.swing.BoxLayout(jPanel15, javax.swing.BoxLayout.LINE_AXIS));

        jLabel19.setText("$ ");
        jPanel15.add(jLabel19);

        txtSubTotal.setEditable(false);
        txtSubTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel15.add(txtSubTotal);

        jPanel9.add(jPanel15);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Iva"));
        jPanel12.setLayout(new javax.swing.BoxLayout(jPanel12, javax.swing.BoxLayout.LINE_AXIS));

        txtPorIva.setEditable(false);
        txtPorIva.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel12.add(txtPorIva);

        jLabel26.setText(" % ");
        jPanel12.add(jLabel26);

        jLabel27.setText(" $ ");
        jPanel12.add(jLabel27);

        txtIva.setEditable(false);
        txtIva.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel12.add(txtIva);

        jPanel9.add(jPanel12);

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Importe Total"));
        jPanel14.setLayout(new javax.swing.BoxLayout(jPanel14, javax.swing.BoxLayout.LINE_AXIS));

        jLabel18.setText("$ ");
        jPanel14.add(jLabel18);

        txtImporteTotal.setEditable(false);
        txtImporteTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel14.add(txtImporteTotal);

        jPanel9.add(jPanel14);

        javax.swing.GroupLayout pnlPedidoLayout = new javax.swing.GroupLayout(pnlPedido);
        pnlPedido.setLayout(pnlPedidoLayout);
        pnlPedidoLayout.setHorizontalGroup(
            pnlPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlInputPedido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlInfoTributario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 892, Short.MAX_VALUE)
            .addGroup(pnlPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, 892, Short.MAX_VALUE))
        );
        pnlPedidoLayout.setVerticalGroup(
            pnlPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPedidoLayout.createSequentialGroup()
                .addComponent(pnlInputPedido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlInfoTributario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 84, Short.MAX_VALUE))
            .addGroup(pnlPedidoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPedidoLayout.createSequentialGroup()
                    .addContainerGap(357, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        jTabbedPane1.addTab("Confirmaci√≥n Pedido", pnlPedido);

        jPanel10.setLayout(new java.awt.GridLayout(2, 0, 3, 3));

        jPanel13.setLayout(new javax.swing.BoxLayout(jPanel13, javax.swing.BoxLayout.X_AXIS));

        jLabel1.setText(" XML: ");
        jLabel1.setAlignmentY(0.3F);
        jPanel13.add(jLabel1);

        txtRutaXml.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtRutaXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRutaXmlActionPerformed(evt);
            }
        });
        jPanel13.add(txtRutaXml);

        btnValidar.setText("Validar XML");
        btnValidar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidarActionPerformed(evt);
            }
        });
        jPanel13.add(btnValidar);

        btnRecepcion.setText("Recepci√≥n");
        btnRecepcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecepcionActionPerformed(evt);
            }
        });
        jPanel13.add(btnRecepcion);

        btnAutorizacion.setText("Autorizar");
        btnAutorizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutorizacionActionPerformed(evt);
            }
        });
        jPanel13.add(btnAutorizacion);

        jPanel10.add(jPanel13);

        jPanel17.setLayout(new javax.swing.BoxLayout(jPanel17, javax.swing.BoxLayout.LINE_AXIS));

        jLabel20.setText("   Autorizado:  ");
        jPanel17.add(jLabel20);

        txtXmlAutorizado.setEditable(false);
        txtXmlAutorizado.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jPanel17.add(txtXmlAutorizado);

        jLabel21.setText("  PDF:  ");
        jPanel17.add(jLabel21);

        txtPdf.setEditable(false);
        txtPdf.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jPanel17.add(txtPdf);

        jPanel10.add(jPanel17);

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));
        jPanel18.setLayout(new java.awt.BorderLayout());

        jPanel20.setLayout(new javax.swing.BoxLayout(jPanel20, javax.swing.BoxLayout.LINE_AXIS));

        jLabel5.setText("  Clave de Acceso:  ");
        jPanel20.add(jLabel5);

        txtclaveAcceso.setEditable(false);
        jPanel20.add(txtclaveAcceso);

        lblEstado.setText("  Estado:  ");
        jPanel20.add(lblEstado);

        txtEstado.setEditable(false);
        jPanel20.add(txtEstado);

        jLabel22.setText("  Fecha Autorizacion:  ");
        jPanel20.add(jLabel22);

        txtFechaAutorizacion.setEditable(false);
        jPanel20.add(txtFechaAutorizacion);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel18.add(jPanel19, java.awt.BorderLayout.PAGE_START);

        edtConsola.setBorder(null);
        edtConsola.setContentType("text/html"); // NOI18N
        jScrollPane2.setViewportView(edtConsola);

        jPanel18.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout pnlEmisionLayout = new javax.swing.GroupLayout(pnlEmision);
        pnlEmision.setLayout(pnlEmisionLayout);
        pnlEmisionLayout.setHorizontalGroup(
            pnlEmisionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlEmisionLayout.setVerticalGroup(
            pnlEmisionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEmisionLayout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Emisi√≥n", pnlEmision);

        pnlPrincipal.add(jTabbedPane1);

        getContentPane().add(pnlPrincipal, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNumeroPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumeroPedidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumeroPedidoActionPerformed

    private void btnConfirmarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarDatosActionPerformed
        // TODO add your handling code here:
        final DLocker bloqueador = new DLocker();
        Thread hilo = new Thread() {
            @Override
            public void run() {
                try {
                    confirmarDatos();
                } finally {
                    bloqueador.dispose();
                }
            }
        };
        hilo.start();
        bloqueador.setVisible(true);
    }//GEN-LAST:event_btnConfirmarDatosActionPerformed

    private void btnXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXmlActionPerformed
        // TODO add your handling code here:
        final DLocker bloqueador = new DLocker();
        Thread hilo = new Thread() {
            @Override
            public void run() {
                try {
                    generacionXML();
                } finally {
                    bloqueador.dispose();
                }
            }
        };
        hilo.start();
        bloqueador.setVisible(true);
    }//GEN-LAST:event_btnXmlActionPerformed

    private void txtDocumentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocumentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDocumentoActionPerformed

    private void txtDirCompradorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDirCompradorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDirCompradorActionPerformed

    private void btnValidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidarActionPerformed
        // TODO add your handling code here:
        final DLocker bloqueador = new DLocker();
        Thread hilo = new Thread() {
            @Override
            public void run() {
                try {
                    validarAndFirmarXML();
                } finally {
                    bloqueador.dispose();
                }
            }
        };
        hilo.start();
        bloqueador.setVisible(true);
    }//GEN-LAST:event_btnValidarActionPerformed

    private void btnRecepcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecepcionActionPerformed
        final DLocker bloqueador = new DLocker();
        Thread hilo = new Thread() {
            @Override
            public void run() {
                try {
                    recepcionSRI();
                } finally {
                    bloqueador.dispose();
                }
            }
        };
        hilo.start();
        bloqueador.setVisible(true);
    }//GEN-LAST:event_btnRecepcionActionPerformed

    private void btnAutorizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutorizacionActionPerformed
        // TODO add your handling code here:
        final DLocker bloqueador = new DLocker();
        Thread hilo = new Thread() {
            @Override
            public void run() {
                try {
                    autorizadoSRI();
                } finally {
                    bloqueador.dispose();
                }
            }
        };
        hilo.start();
        bloqueador.setVisible(true);
    }//GEN-LAST:event_btnAutorizacionActionPerformed

    private void txtRutaXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRutaXmlActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRutaXmlActionPerformed

    private void confirmarDatos() {
        String numeroPedido = txtNumeroPedido.getText();
        if (numeroPedido != null && !numeroPedido.isEmpty()) {
            try {
                confirmarFactura(numeroPedido);
            } catch (SQLException ex) {
                btnXml.setEnabled(false);
                Util.mostrarError(ex, "Error1 SQL Exception");
            } catch (IOException ex) {
                btnXml.setEnabled(false);
                Util.mostrarError(ex, "Error2 IOException");
            } catch (XmlException ex) {
                btnXml.setEnabled(false);
                Util.mostrarError(ex, "Error3 XmlException");
            } catch (ClassNotFoundException ex) {
                btnXml.setEnabled(false);
                Util.mostrarError(ex, "Error4 ClassNotFoundException");
            }
        } else {
            Util.mostrarWarning("Debe ingresar el numero de pedido");
        }
    }

    private void confirmarFactura(String numeroPedido) throws SQLException, IOException, XmlException, ClassNotFoundException {
        FacturaService gf = FactoryService.createFacturaService();
        gf.setNumVentCred(numeroPedido);
        factura = gf.obtenerInformacion();
        InfoTributaria it = factura.getInfoTributaria();
        txtRazonSocial.setText(it.getRazonSocial());
        txtNombreComercial.setText(it.getNombreComercial());
        txtDocumento.setText(it.getRuc());
        txtEstablecimiento.setText(it.getEstab());
        txtPtoEmision.setText(it.getPtoEmi());
        txtSecuencial.setText(it.getSecuencial());
        txtMatriz.setText(it.getDirMatriz());

        InfoFactura ifa = factura.getInfoFactura();
        txtFechaEmision.setText(ifa.getFechaEmision());
        txtTipoIdComprador.setText(ifa.getTipoIdentificacionComprador());
        txtRsComprador.setText(ifa.getRazonSocialComprador());
        txtIdComprador.setText(ifa.getIdentificacionComprador());
        txtDirComprador.setText(ifa.getDireccionComprador());
        txtDescuento.setText(ifa.getTotalDescuento());
        Util.setText(txtValor, ifa.getTotalSinImpuestos());
        Util.setText(txtPorIva, ifa.getTotalConImpuestos().get(0).getTarifa());
        Double sub = Double.parseDouble(Util.getText(txtValor)) - Double.parseDouble(Util.getText(txtDescuento));
        Util.setText(txtSubTotal, Util.dosDigitos(sub));
        Util.setText(txtIva, ifa.getTotalConImpuestos().get(0).getValor());
        txtImporteTotal.setText(ifa.getImporteTotal());

        List<FacturaDetalle> detalles = factura.getDetalles();
        fdModel.limpiar();
        tbDetalle.setModel(fdModel);
        for (FacturaDetalle fd : detalles) {
            fdModel.addRow(fd);
        }
        tbDetalle.updateUI();
        btnXml.setEnabled(true);
    }

    public void generacionXML() {
        String numeroPedido = txtNumeroPedido.getText();
        if (numeroPedido != null && !numeroPedido.isEmpty()) {
            ConexionService cs = new ConexionService();
            VentfacCabecera cab = cs.getVentaCabeceraByNumVenta(Util.stringToLong(numeroPedido));
            if (cab == null) {
                try {
                    if (emitirAsiMismo() == 0) {
                        enableBotones(true);
                        FacturaService gf = new FacturaService();
                        gf.setNumVentCred(numeroPedido);

                        String xml = gf.generarFacturaXML();
                        //gf.Informacion();//habilitar esta opcion
                        Util.setText(txtRutaXml, xml);
                        Util.mostrarExisto("Se Genero XMl con Exito");
                    } else {
                        enableBotones(false);
                    }
                } catch (SQLException ex) {
                    Util.mostrarError(ex, "Error1 SQL Exception");
                } catch (IOException ex) {
                    Util.mostrarError(ex, "Error2 IOException");
                } catch (XmlException ex) {
                    Util.mostrarError(ex, "Error3 XmlException");
                } catch (ClassNotFoundException ex) {
                    Util.mostrarError(ex, "Error4 ClassNotFoundException");
                }
            } else {
                Util.setText(txtRutaXml, cab.getXml());
                Util.setText(txtXmlAutorizado, cab.getXmlAutorizado());
                Util.setText(txtPdf, cab.getPdf());
                Util.setText(txtclaveAcceso, cab.getClaveAcceso());
                Util.mostrarWarning("Ya se genero El XML para Este documento");
            }
        }
    }
    
    private int emitirAsiMismo() throws UnsupportedEncodingException, IOException {
        PropertiesUtil.getInstanceProperties();
        String idEmisor = PropertiesUtil.getValorPathXML("mirian.emisor.id");
        if (Util.getText(txtDescuento).equals("0.00") && Util.getText(txtCodigoCliente).equalsIgnoreCase(idEmisor)) {
            int respuesta = Util.mensajeConfirmacion();//si = 0, no = 1
            return respuesta;
        } else {
            return 0;
        }
    }
    
    private void enableBotones(boolean flag) {
        Util.enableButton(btnXml, flag);
        Util.enableButton(btnAutorizacion, flag);
        Util.enableButton(btnRecepcion, flag);
        Util.enableButton(btnValidar, flag);
    }

    public void validarAndFirmarXML() {
        try {
            agregarTextoAEditorConsola("<html>");
            firmarXML();
            validarXML();
        } catch (FirmaException | ValidacionException | XmlException ex) {
            agregarLog(ex.getMessage(), 3);
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void firmarXML() throws FirmaException {
        String xml = Util.getText(txtRutaXml);
        FirmaFactory.createFirmaServices().firma(xml,
                config.getFirma(),
                config.getClaveFirma());
        agregarLog("Se realizo la firma Electronica del XML", 1);
    }
    
    private void cargarConfiguracion() {
        config = getConfiguracion();
    }
    
    private Configuracion getConfiguracion() {
        ConexionService cs = FactoryService.createConexionService();
        return cs.getConfiguracionById(Constante.ID_CONFIGURACION_DEFECTO);
    }
    
    private void validarXML() throws ValidacionException, XmlException, FirmaException {
        XmlServices<Factura> xmlServices = XmlFactory.getFacturaXmlServices();
        Factura comprobante = (Factura) xmlServices.getComprobanteDePathArchivo(txtRutaXml.getText());
        ValidacionFactory.createValidacionFacturaServices().validar(comprobante, config.getXsdfactura());
        agregarLog("XML se valido Correctamente", 1);
    }
    
    private void recepcionSRI() {
        try {
            enviarARecepcion();
        } catch (RecepcionException ex) {
            agregarLog(ex.getMessage(), 3);
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void enviarARecepcion() throws RecepcionException {
        agregarLog("Enviando a Recepcion", 1);
        RespuestaSolicitud rs = EnvioRecepcion.create().enviarToRecepcion(Util.getText(txtRutaXml));
        obtenerRespuesta(rs);
    }

    private void obtenerRespuesta(RespuestaSolicitud rs) {
        Util.setText(txtEstado, rs.getEstado());
        if (rs.getEstado().equalsIgnoreCase(Constante.RECIBIDA)) {
            agregarLog(rs.getEstado(), 1);
            agregarLog("El Documento se envio a Recepcion", 1);
        } else {
            agregarLog(rs.getEstado(), 3);
            agregarLog(rs.getComprobantes().getComprobante().get(0).getClaveAcceso(), 3);
            agregarLog(rs.getComprobantes().getComprobante().get(0).getMensajes().getMensaje().get(0).getIdentificador(), 3);
            agregarLog(rs.getComprobantes().getComprobante().get(0).getMensajes().getMensaje().get(0).getInformacionAdicional(), 3);
            agregarLog(rs.getComprobantes().getComprobante().get(0).getMensajes().getMensaje().get(0).getMensaje(), 3);
            agregarLog(rs.getComprobantes().getComprobante().get(0).getMensajes().getMensaje().get(0).getTipo(), 3);
        }
    }
    
    private void autorizadoSRI() {
        try {
            agregarLog("Enviando a autorizacion", 1);
            RespuestaComprobante rc = EnvioAutorizar.create().enviarAutorizar(Util.getText(txtclaveAcceso));
            obtenerRespuestaComprobante(rc);
        } catch (IOException | XmlException | AutorizacionException ex) {
            agregarLog(ex.getMessage(), 3);
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            agregarLog(ex.getMessage(), 3);
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void obtenerRespuestaComprobante(RespuestaComprobante rc) throws IOException, XmlException, Exception {
        if (rc.getAutorizaciones().getAutorizacion() != null
                && !rc.getAutorizaciones().getAutorizacion().isEmpty()) {
            String estado = rc.getAutorizaciones().getAutorizacion().get(0).getEstado();
            String fechaAutorizada = rc.getAutorizaciones().getAutorizacion().get(0).getFechaAutorizacion();
            Util.setText(txtEstado, estado);
            Util.setText(txtFechaAutorizacion, fechaAutorizada);
            if (estado.equalsIgnoreCase(Constante.AUTORIZADO)) {
                agregarLog(estado, 1);
                agregarLog(fechaAutorizada, 1);
                XStreamAutorizacion.getInstance().generarXml(rc, getPthAutorizado());
                agregarLog("El Documento se envio a Autorizacion", 1);
                pathPdf();
                FacturaService gf = FactoryService.createFacturaService();
                gf.setNumVentCred(Util.getText(txtNumeroPedido));
                gf.saveInformacion();//habilitar esta opcion
                generarPDF(rc);
//                enviarNotificacion();
                imprimir();
            } else {
                agregarLog(estado, 3);
                agregarLog(fechaAutorizada, 1);
                agregarLog(rc.getAutorizaciones().getAutorizacion().get(0).getMensajes().getMensaje().get(0).getIdentificador(), 3);
                agregarLog(rc.getAutorizaciones().getAutorizacion().get(0).getMensajes().getMensaje().get(0).getMensaje(), 3);
                agregarLog(rc.getAutorizaciones().getAutorizacion().get(0).getMensajes().getMensaje().get(0).getInformacionAdicional(), 3);
            }
        } else {
            Util.mostrarWarning("El Documento No ha sido Recepcionado, Por favor volver a enviar a Recepcion");
        }
    }
    
    private String getPthAutorizado() {
        String xmlAutorizado = Util.getText(txtRutaXml).replace(td.getDirectorio() + "/", td.getDirectorio() + "/AUTORIZADO/");
        Util.setText(txtXmlAutorizado, xmlAutorizado);
        return xmlAutorizado;
    }
    
    private void generarPDF(RespuestaComprobante rc) throws XmlException, Exception {
        agregarLog("Generando el PDF", 1);
        PdfServices pdfServices = PdfFactory.createPdfFacturaServices();
        pdfServices.setPathIreport(JASPER_ROOT + Constante.FACTURA_JASPER);
        pdfServices.setLogo(Util.getLogo());
        pdfServices.setPathInfoAdicional(Util.getPathInfoAdicional());
        XmlServices xmlServices = XmlFactory.getFacturaXmlServices();
        pdfServices.generarPdf(xmlServices.getComprobanteDePathArchivo(Util.getText(txtRutaXml)),
                Util.getText(txtPdf),
                rc.getAutorizaciones().getAutorizacion().get(0).getNumeroAutorizacion(),
                rc.getAutorizaciones().getAutorizacion().get(0).getFechaAutorizacion(),
                null, null, "12");
        agregarLog("PDF generado!...", 1);
    }
    
    private void imprimir() {
        agregarLog("Imprimiendo PDF!...", 1);
        ReporteFactura rf = new ReporteFactura();
        factura.getInfoTributaria().setSecuencial(Util.getText(txtSecuencial));
        rf.setFactura(factura);
        rf.setFechaAutorizacion(Util.getText(txtFechaAutorizacion));
        rf.setNroAutorizacion(Util.getText(txtclaveAcceso));
        rf.imprimir();
        agregarLog("impreso existoso!...", 1);
    }
    
    private void enviarNotificacion() throws IOException {
        agregarLog("Enviando Correo ...", 1);
        List<String> adjunto = new ArrayList<>();
        adjunto.add(Util.getText(txtXmlAutorizado));
        adjunto.add(Util.getText(txtPdf));

        Notificacion notificacion = EnviarNotificacion.AUTORIZADO_CONFIRMACION;

        String sriCorrelativo = Util.getText(txtEstablecimiento) + "-" + Util.getText(txtPtoEmision) + "-" + Util.getText(txtSecuencial);
        notificacion.enviarCorreo(getMailProperties(getMailSetting()),
                td.getDescripcion(),
                sriCorrelativo,
                Util.getText(txtNumeroPedido),
                config.getAmbiente() == 2 ? correo : "mmoyanol1180@gmail.com",
                "mmoyanol1180@gmail.com", NOTIFICACION_ROOT + Constante.AUTORIZADO_COMFIRMACION, adjunto);
        agregarLog("Correo Enviado", 1);
    }

    public MailSetting getMailSetting() throws UnsupportedEncodingException, IOException {
        MailSetting ms = new MailSetting();
        PropertiesMail.getInstanceProperties();
        ms.setHost(PropertiesMail.getValorAcceso("mail.smtp.host"));
        ms.setPassword(PropertiesMail.getValorAcceso("mail.smtp.password"));
        ms.setPort(PropertiesMail.getValorAcceso("mail.smtp.port"));
        ms.setUser(PropertiesMail.getValorAcceso("mail.smtp.user"));
        return ms;
    }
    
    private MailProperties getMailProperties(final MailSetting ms) {
        return new MailProperties() {

            @Override
            public String getHost() {
                return ms.getHost();
            }

            @Override
            public String getPort() {
                return ms.getPort();
            }

            @Override
            public String getUsuario() {
                return ms.getUser();
            }

            @Override
            public String getPassword() {
                return ms.getPassword();
            }
        };
    }
    
    private void agregarTextoAEditorConsola(String texto) {
        log = texto;
        edtConsola.setText(log);
        DefaultCaret caret = (DefaultCaret) edtConsola.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }
    
    private void agregarLog(String mensaje, int i) {
        agregarTextoAEditorConsola(obtenerTextoDeEditorConsola() + Util.convierteTextoAFormatoHTML(i, mensaje));
    }
    
    public String obtenerTextoDeEditorConsola() {
        if (log.length() > 6) {
            return log.substring(0, log.length() - 7);
        } else {
            return log;
        }
    }
    
    public void pathPdf() {
        Util.setText(txtPdf, Util.getText(txtXmlAutorizado).replace(".xml", ".pdf"));
    }

    public String getClaveAcceso() {
        return Util.getText(txtclaveAcceso);
    }

    public String getXml() {
        return Util.getText(txtRutaXml);
    }

    public String getXmlAutorizado() {
        return Util.getText(txtXmlAutorizado);
    }

    public void setDescuento(String porcentajeDesc) {
        Util.setText(txtDescuento, porcentajeDesc);
    }

    public void setPorDescuento(String porcentajeDesc) {
        Util.setText(txtPorDescuento, porcentajeDesc);
    }

    public String getPorDescuento() {
        return Util.getText(txtPorDescuento);
    }

    public void setSecuencial(String secuencial) {
        Util.setText(txtSecuencial, secuencial);
    }

    public String getSecuencial() {
        return Util.getText(txtSecuencial);
    }

    public void setClaveAcceso(String claveAcceso) {
        Util.setText(txtclaveAcceso, claveAcceso);
    }

    public String getPdf() {
        return Util.getText(txtPdf);
    }

    public void setValor(String valor) {
        Util.setText(txtValor, valor);
    }

    public String getSubTotal() {
        return Util.getText(txtSubTotal);
    }

    public void setTxtCiudadCliente(String ciudad) {
        Util.setText(txtCiudadCliente, ciudad);
    }

    public String getTxtCiudadCliente() {
        return Util.getText(txtCiudadCliente);
    }

    public void setTxtCorreoCliente(String correo) {
        Util.setText(txtCorreoCliente, correo);
    }

    public String getTxtCorreoCliente() {
        return Util.getText(txtCorreoCliente);
    }

    public void setCodigoCliente(String codigoCliente) {
        Util.setText(txtCodigoCliente, codigoCliente);
    }

    public String getCodigoCliente() {
        return Util.getText(txtCodigoCliente);
    }

    public String getEstabl() {
        return Util.getText(txtEstablecimiento);
    }

    public String getPtoEmision() {
        return Util.getText(txtPtoEmision);
    }
    
    public String getCorreo() {
        return correo;
    }

    public void setCorreo(String correo) {
        this.correo = correo;
    }
    
    public String getFechaAutorizacion() {
        return Util.getText(txtFechaAutorizacion);
    }
    
    public String log = "";
    private String correo;
    private Factura factura;
    private final FacturaDetalleModel fdModel = new FacturaDetalleModel();
    private Configuracion config;
    private final TipoDocumentoEnum td = TipoDocumentoEnum.FACTURA;
    private final String JASPER_ROOT = So.isWindows() ? Windows.JASPER_ROOT : (So.isMac() ? Mac.JASPER_ROOT : Linux.JASPER_ROOT);
    private final String NOTIFICACION_ROOT = So.isWindows() ? Windows.NOTIFICACION_ROOT : (So.isMac() ? Mac.NOTIFICACION_ROOT : Linux.NOTIFICACION_ROOT);
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAutorizacion;
    private javax.swing.JButton btnConfirmarDatos;
    private javax.swing.JButton btnRecepcion;
    private javax.swing.JButton btnValidar;
    private javax.swing.JButton btnXml;
    private javax.swing.JEditorPane edtConsola;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblDirComprador;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblFechaEmision;
    private javax.swing.JLabel lblIdComprador;
    private javax.swing.JLabel lblIdTipoComprador;
    private javax.swing.JLabel lblPedido;
    private javax.swing.JLabel lblRSComprador;
    private javax.swing.JPanel pnlEmision;
    private javax.swing.JPanel pnlInfoTributario;
    private javax.swing.JPanel pnlInputPedido;
    private javax.swing.JPanel pnlPedido;
    private javax.swing.JPanel pnlPrincipal;
    private javax.swing.JTable tbDetalle;
    private javax.swing.JTextField txtCiudadCliente;
    private javax.swing.JTextField txtCodigoCliente;
    private javax.swing.JTextField txtCorreoCliente;
    private javax.swing.JTextField txtDescuento;
    private javax.swing.JTextField txtDirComprador;
    private javax.swing.JTextField txtDocumento;
    private javax.swing.JTextField txtEstablecimiento;
    private javax.swing.JTextField txtEstado;
    private javax.swing.JTextField txtFechaAutorizacion;
    private javax.swing.JTextField txtFechaEmision;
    private javax.swing.JTextField txtIdComprador;
    private javax.swing.JTextField txtImporteTotal;
    private javax.swing.JTextField txtIva;
    private javax.swing.JTextField txtMatriz;
    private javax.swing.JTextField txtNombreComercial;
    private javax.swing.JTextField txtNumeroPedido;
    private javax.swing.JTextField txtPdf;
    private javax.swing.JTextField txtPorDescuento;
    private javax.swing.JTextField txtPorIva;
    private javax.swing.JTextField txtPtoEmision;
    private javax.swing.JTextField txtRazonSocial;
    private javax.swing.JTextField txtRsComprador;
    private javax.swing.JTextField txtRutaXml;
    private javax.swing.JTextField txtSecuencial;
    private javax.swing.JTextField txtSubTotal;
    private javax.swing.JTextField txtTipoIdComprador;
    private javax.swing.JTextField txtValor;
    private javax.swing.JTextField txtXmlAutorizado;
    private javax.swing.JTextField txtclaveAcceso;
    // End of variables declaration//GEN-END:variables

    
}
